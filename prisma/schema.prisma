// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(cuid()) @db.VarChar(50)
  userName   String       @unique @db.VarChar(20) @map("user_name")
  password   String       @db.VarChar(100)
  disabled   Boolean      @default(false)
  deleted    Boolean      @default(false)
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt @map("updated_at")

  profile    Profile?
  roleInUser RoleInUser[]
  userInArticle UserInArticle[]

  @@map("users")
}

enum Gender {
  MA
  FE
  OT
}

model Profile {
  id          Int       @id @default(autoincrement()) @db.Integer
  nickName    String?   @db.VarChar(50) @map("nick_name")
  avatar      String?   @db.VarChar(255)
  email       String?   @unique @db.VarChar(50)
  phone       String?   @unique @db.VarChar(20)
  gender      Gender    @default(OT)
  birthday    DateTime?
  description String?   @db.VarChar(150)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  userId String @unique @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("profiles")
}

model Role {
  id          Int      @id @default(autoincrement()) @db.SmallInt
  name        String   @unique @db.VarChar(50)
  description String?  @db.VarChar(150)
  disabled    Boolean  @default(false)
  deleted     Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  roleInUser       RoleInUser[]
  permissionInRole PermissionInRole[]

  @@map("roles")
}

model RoleInUser {
  roleId Int  @map("role_id")
  roles  Role @relation(fields: [roleId], references: [id])

  userId String @map("user_id")
  users  User   @relation(fields: [userId], references: [id])

  @@id([roleId, userId])
  @@map("role_in_user")
}

enum Type {
  DIRECTORY
  MENU
  BUTTON
}

model Permission {
  id               Int                @id @default(autoincrement()) @db.SmallInt
  type             Type               @default(MENU)
  name             String             @unique @db.VarChar(50)
  permission       String?            @unique @db.VarChar(50)
  icon             String?            @db.VarChar(50)
  path             String?            @db.VarChar(50)
  component        String?            @db.VarChar(150)
  sort             Int                @default(0) @db.SmallInt
  redirect         String?            @db.VarChar(100)
  disabled         Boolean            @default(false)
  hidden           Boolean            @default(false)
  cache            Boolean            @default(false)
  props            Boolean            @default(false)
  deleted          Boolean            @default(false)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  
  pid              Int?               @db.SmallInt
  parent           Permission?        @relation("ParentToChildren", fields: [pid], references: [id])
  children         Permission[]       @relation("ParentToChildren")
  
  permissionInRole PermissionInRole[]

  @@map("permissions")
}

model PermissionInRole {
  permissionId Int        @map("permission_id")
  permissions  Permission @relation(fields: [permissionId], references: [id])
  
  roleId Int  @map("role_id")
  roles  Role @relation(fields: [roleId], references: [id])
  
  @@id([roleId, permissionId])
  @@map("role_in_permission")
}

model Category {
  id               Int                @id @default(autoincrement()) @db.SmallInt
  name             String             @unique @db.VarChar(50)
  description      String?            @db.VarChar(150)
  hidden           Boolean            @default(false)
  sort             Int                @default(0) @db.SmallInt
  deleted          Boolean            @default(false)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")

  pid              Int?               @db.SmallInt
  parent           Category?          @relation("ParentToChildren", fields: [pid], references: [id])
  children         Category[]         @relation("ParentToChildren")

  article          Article[]

  @@map("category")
}

model Article {
  id               Int                @id @default(autoincrement())
  title            String             @db.VarChar(150)
  slug             String?            @unique @db.VarChar(200) // SEO-friendly URL
  summary          String?            @db.VarChar(500) // Short preview text
  content          String             @db.Text
  coverImage       String?            @map("cover_image") @db.VarChar(255)
  
  published        Boolean            @default(false)
  publishedAt      DateTime?          @map("published_at")
  featured         Boolean            @default(false)
  
  viewCount        Int                @default(0) @map("view_count") @db.Integer
  likeCount        Int                @default(0) @map("like_count") @db.Integer
  commentCount     Int                @default(0) @map("comment_count") @db.Integer
  
  visibility       Int                @db.SmallInt
  
  deleted          Boolean            @default(false)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")

  categoryName     String             @map("category_name")
  category         Category           @relation(fields: [categoryName], references: [name])
  userInArticle    UserInArticle[]
  
  @@map("article")
}

model UserInArticle {
  userId      String      @map("user_id")
  user        User        @relation(fields: [userId], references: [id])

  articleId   Int         @map("article_id")
  article     Article     @relation(fields: [articleId], references: [id])

  @@id([userId, articleId])
  @@map("user_in_article")
}
